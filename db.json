[{"title":"React Native 原架构","url":"/2023/10/06/React%20Native/React%20Native%20%E5%8E%9F%E6%9E%B6%E6%9E%84/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<p>[!summary]<br> 本文章将会详细讲解 React Native 的原有架构，并分析原有架构所存在的问题。为后续 React Native 新架构的讲解做铺垫</p>\n</blockquote>\n<h1 id=\"移动端的发展\"><a href=\"#移动端的发展\" class=\"headerlink\" title=\"移动端的发展\"></a>移动端的发展</h1><p>上世纪 90 年代，3Com 公司的 Palm OS 成为移动领域（掌上电脑）的霸主，市场占有率达 90%。直到 20 世纪末，微软推出了 Windows CE 和 Windows Mobile，取代了 Palm OS。随后，Symbian 和 Blackberry 昙花一现，也曾一度占有 40%的市场。再后来，W3C 立项 HTML5，并于 2008 年 1 月发布 HTML5 第一份正式草案。2007 年 1 月，苹果推出了第一部 iPhone，iOS 系统诞生。同年 11 月，google 宣布推出 Android 系统，并于次年 10 月发布了第一部 Android 智能手机。至此，移动端的基本格局已经奠定。</p>\n<p>2010-2012 年：FaceBook 牵头成立 Moblie Web 工作组，大举进攻移动领域，Web App 的呼声越来越高，一度认为 Native App 在 3 年内会消亡</p>\n<p>2012 年：FaceBook 宣布放弃使用 HTML 5 构造自己的主题应用，HTML 5 进入最惨淡的一年</p>\n<p>2014 年 10 底：HTML5 定稿，迎来了原生+HTML5 的混合开发模式</p>\n<p>2015 年：FackBook 推出 React Native</p>\n<p>2018 年 2 月：Google 发布 Flutter 第一版本</p>\n<p>2018 年 6 月：FaceBook 宣布对 React Native 进行大规模重构，并在 2023 年基本完成重构工作</p>\n<h1 id=\"跨平台方法的对比\"><a href=\"#跨平台方法的对比\" class=\"headerlink\" title=\"跨平台方法的对比\"></a>跨平台方法的对比</h1><blockquote>\n<p>[!question] 为什么要进行跨平台的研究<br>【微观上】：企业要提高开发效率，降低开发成本，实现一次编码，到处运行；【宏观上】：现在处于多端发展时代，多种终端生态互不兼容，造成生产力浪费，势必会有一种新技术代表先进生产力</p>\n</blockquote>\n<h2 id=\"Native-App\"><a href=\"#Native-App\" class=\"headerlink\" title=\"Native App\"></a>Native App</h2><p>第三方应用程序会与平台进行交互，以创建 widgets（组件） 或访问相机等服务。其中 widgets 呈现给屏幕画布，并将事件传回给 widgets</p>\n<p><img src=\"/img/ReactNative/NativeApp%E6%9E%B6%E6%9E%84.png\"></p>\n<h3 id=\"基于-WebView-的第一代跨平台框架\"><a href=\"#基于-WebView-的第一代跨平台框架\" class=\"headerlink\" title=\"基于 WebView 的第一代跨平台框架\"></a>基于 WebView 的第一代跨平台框架</h3><p>第一代跨平台框架基于 JavaScript 和 WebViews，代表者有：PhoneGap，微信小程序。</p>\n<p>第三方应用程序创建 HTML 并将其显示在平台的 WebView 上，对于平台提供的一些系统服务，通过 JS Bridge 来调用。由于这些调用不是很频繁，JS Bridge 并不会成为性能瓶颈。然而，一个完整 HTML5 页面的展示要经历浏览器控件的加载、解析和渲染三大过程，性能消耗要比原生开发增加 N 个数量级，所以这种方案的瓶颈在于 WebView 对于 H5 页面的渲染。这种开发模式开发的 App 既有原生应用代码又有 Web 应用代码，因此又被称为 Hybrid App（混合应用程序）</p>\n<p><img src=\"/img/ReactNative/WebView%E6%9E%B6%E6%9E%84.png\"></p>\n<h3 id=\"以-React-Native-为代表的第二代跨平台框架\"><a href=\"#以-React-Native-为代表的第二代跨平台框架\" class=\"headerlink\" title=\"以 React Native 为代表的第二代跨平台框架\"></a>以 React Native 为代表的第二代跨平台框架</h3><p>这种方案也称为<strong>泛 Web 容器方案</strong> ，这种方案放弃了 WebView 渲染，采用原生自带的 UI 组件代替了核心的渲染引擎，所以这种方案的性能要比第一代方案好很多。代表者就是 RN 、Weex。同时这种方案保持了 JavaScript 作为开发语言，支持前端丰富的生态（比如 RN 使用 React.js 极大地方便了 UI 的创建）。由于前端和 Native 的交互都要通过中间的 Bridge，很自然的 Bridge 就成了这种方案的性能瓶颈<br><img src=\"/img/ReactNative/ReactNative%E6%97%A7%E6%9E%B6%E6%9E%84.png\"></p>\n<h3 id=\"以-Flutter-为代表的第三代跨平台框架\"><a href=\"#以-Flutter-为代表的第三代跨平台框架\" class=\"headerlink\" title=\"以 Flutter 为代表的第三代跨平台框架\"></a>以 Flutter 为代表的第三代跨平台框架</h3><p>为什么说 Flutter 是一种新的方案呢？因为他采用了一种自绘引擎的方式，和以往的方案都不一样；Flutter 既不用 WebView 进行组件渲染，也不适用原生组件进行渲染，他完全自己搞了一套跨平台 UI 渲染框架，渲染引擎依靠跨平台的 Skia 图形库来实现，手机平台只需要提供一块画布即可。同时开发语言使用即支持 JIT 又支持 AOT 的 Dart 语言，即提升了执行效率，也为支持动态化提供可能<br><img src=\"/img/ReactNative/Flutter%E6%9E%B6%E6%9E%84.png\"></p>\n<h1 id=\"ReactNative-架构一览\"><a href=\"#ReactNative-架构一览\" class=\"headerlink\" title=\"ReactNative 架构一览\"></a>ReactNative 架构一览</h1><p>本文基于 React Native 0.54.3 版本 Android 的架构分析</p>\n<p><img src=\"/img/ReactNative/ReactNative%E6%9E%B6%E6%9E%84%E5%B1%82%E7%BA%A7.png\"><br>RN 的老架构主要包含 React、JavaScript、Bridge 和 Native 四个部分。从上到下可以分成四层，分别是 JS 代码层、JS 引擎层、通信层、原生层。最上面的 JS 代码层提供 React.js 支持，React.js 的 JSX 代码转换为 JS 代码运行在 [[JavaScriptCore]] 提供的 JavaScript 运行时环境中，通信层将 JavaScript 与 Native 层连接起来；通信层又分为三部分，其中 Shadow Tree 用来定义 UI 效果及交互功能、Native Modules 提供 Native 功能（比如相册、蓝牙等）、而他们之间的相互通信使用的是 JSON 异步消息</p>\n<p>基于上述架构，RN 运行时创建三个线程：</p>\n<ul>\n<li>「<strong>JS Thread</strong>」： 主要负责 React，JS 的执行，输出 App 的视图信息（结构、样式、属性等）</li>\n<li>「<strong>Shadow Thread</strong>」：根据 JS 线程的视图信息，创建出用于布局计算的 ShadowTree；（主要用到 UIManagerModule，是 RN 中非常重要的 Native Module，故也叫做 Native Module Thread）</li>\n<li>「<strong>Main Thead</strong>」：根据 ShadowTree 提供的完整试图信息，负责真实 Native View 的创建<br>下面，将分为启动流程、渲染原理、通信机制三个部分详细剖析一下 RN 的实现原理</li>\n</ul>\n<h1 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h1><p>总结起来，启动流程主要做了两件事：一件是准备环境，一件事调用 JS 侧的入口函数<br>准备环境：在后台创建上下文、初始化通信桥、加载 JSBundle、初始化 JS 执行环境。<br>调用 JS 侧的入口函数：即调用 Appregistry.js 的 runApplication 方法，为一次 Native 到 JS 的调用</p>\n<p><img src=\"/img/ReactNative/RN%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png\"></p>\n<h1 id=\"渲染原理\"><a href=\"#渲染原理\" class=\"headerlink\" title=\"渲染原理\"></a>渲染原理</h1><p><img src=\"/img/ReactNative/RN%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86.png\"></p>\n<p>RN 运行时会创建三个线程：JS Thread、Shadow Thread、Main Thread，在这三个线程中分别会创建三棵树，JS 线程中会创建一棵叫做<strong>Fiber Tree</strong>，在 Shadow 线程中会创建一棵树叫做<strong>Shadow Tree</strong>，在 UI 线程中则是 <strong>View Tree</strong> 。其中，Fiber Tree 在 JS 侧创建，Shadow Tree 和 View Tree 在 Native 测创建，RN 渲染机制的重点就是这三棵树的创建和同步，关键步骤如下：</p>\n<p><img src=\"/img/ReactNative/RN%E6%B8%B2%E6%9F%93Tree%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%90%8C%E6%AD%A5.png\"></p>\n<ol>\n<li><strong>第一步：</strong> 通过 React.js 的 JSX 定义 UI 结构</li>\n<li><strong>第二步：</strong> 编译阶段，通过 Babel 将 JSX 转化为 React.createElement 的形态</li>\n<li><strong>第三步：</strong> 在 JS 侧，通过深度优先遍历将 JSX 编写的 UI 组件转换为 Fiber Tree 结构，每个组件节点都包含子组件、父组件和兄弟组件的引用</li>\n<li><strong>第四步：</strong> JS 侧在创建 Fiber Tree 各个节点的时候会通过 Bridge 桥向 Native 侧发送对应的指令。Native 侧收到这些指令之后会创建对应的 Shadow Tree 节点，同时会生成对应的 UIViewOperation，加入到 UIViewOperationQueue 中，以供 UI 线程进行真正的 UI 操作。JS 侧发送完一批 UI 指令之后会触发 Native 侧的 onBatchComplete 回调，进而后续遍历 ShadowTree，分别计算每个节点的宽度和高度，然后前序遍历 ShadowTree，确定每个节点的最终位置，生成相应的 UpdateLayoutOperation，加入到 UIViewOperationQueue 中</li>\n<li><strong>第五步：</strong> 出发 FrameCallback，从 UIViewOperationQueue 中依次取出 UIViewOperation，生成对应的 View Tree，挂载到 RootView，进行原生 UI 渲染逻辑</li>\n</ol>\n<blockquote>\n<p>[!question]- 虚节点和 Layout Only 节点区别？</p>\n<ol>\n<li>虚节点在计算布局时会被忽略，也不会生成相应的 Native 节点</li>\n<li>LayoutOnly 节点指一个节点只会影响到它的子节点的位置，而本身不需要绘制任何内容，那么这个节点就是 LayoutOnly 节点，也不会生成相应的 Native 控件</li>\n</ol>\n</blockquote>\n<h1 id=\"通信机制\"><a href=\"#通信机制\" class=\"headerlink\" title=\"通信机制\"></a>通信机制</h1><p><img src=\"/img/ReactNative/RN%E5%8E%9F%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6.png\"><br>在 RN 中有三个线程：JS 线程、UI 线程、Shadow 线程（即 Native Modules 线程），而在 Native Modules 线程中，主要用于进行 Yoga 布局计算，同时也负责 C++层和原生通信。我们知道 Java 可以通过 JNI 的方式和 C++代码实现相互调用，而 Objective-C 可以直接调用 C++代码。JS 可以通过 [[JavaScriptCore]] 实现和 C++的相互调用，而 JavaScriptCore 是由 C++实现的 JS 引擎，所以很自然的，C++就成为了连接原生和 JS 的桥梁。</p>\n<p>所以 RN 的通信机制总结起来就是一句话：<strong>一个 C++实现的 bridge (桥)打通了原生和 JS，实现了两者的相互调用</strong></p>\n<h3 id=\"桥的初始化\"><a href=\"#桥的初始化\" class=\"headerlink\" title=\"桥的初始化\"></a>桥的初始化</h3><p>在 RN 的启动流程中，会对通信桥进行初始化。通信桥的初始化最关键的就是创建两张表和建立两个桥。两张表中，一张是 JavaScriptModuleRegistry，供原生调用 JS 使用，一张是 NativeModuleRegistry，供 JS 调用原生使用；两个桥中，一个是 NativeToJSBridge，是原生调用 JS 的桥梁，一个是 JSToNativeBridge，JS 调用原生的桥梁。</p>\n<h3 id=\"Native-调用-JS\"><a href=\"#Native-调用-JS\" class=\"headerlink\" title=\"Native 调用 JS\"></a>Native 调用 JS</h3><p>Native 调用 JS 的流程相对简单：</p>\n<p><img src=\"/img/ReactNative/RNNative%E8%B0%83%E7%94%A8JS.png\"></p>\n<ol>\n<li>在 Java 层把要实现的功能编写成接口并继承 JavaScriptModule，并交由 ReactPackage 管理，最终</li>\n</ol>\n","tags":["ReactNative"]}]